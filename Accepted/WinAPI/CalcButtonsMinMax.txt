#include <tchar.h>
#include <Windows.h>
#include <map>

#pragma comment(linker, "\"/manifestdependency:type='win32' \
name='Microsoft.Windows.Common-Controls' version='6.0.0.0' processorArchitecture='*' \
publicKeyToken='6595b64144ccf1df' language='*'\"")

BOOL CALLBACK EnumChildProc(HWND hWindow, LPARAM lParam);
LRESULT CALLBACK WindowProcedure(HWND, UINT, WPARAM, LPARAM);

bool Visability = 1;
RECT a = {};
std::map<HWND, RECT> ButtonMap;

INT WINAPI _tWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR szCmdLine, INT nCmdShow)
{
	TCHAR szClassWindow[] = TEXT("Win32Application");

	WNDCLASSEX wc = {};
	wc.cbClsExtra = 0;
	wc.cbSize = sizeof(wc);
	wc.cbWndExtra = 0;
	wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	wc.hInstance = hInstance;
	wc.lpfnWndProc = WindowProcedure;
	wc.lpszClassName = szClassWindow;
	wc.lpszMenuName = NULL;
	wc.style = CS_HREDRAW | CS_VREDRAW;

	INT nExitCode = 0;

	if (RegisterClassEx(&wc))
	{
		HWND hWindow = CreateWindowEx(0, szClassWindow, TEXT("Enumerate Child Windows"),
			WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, NULL,
			NULL, hInstance, NULL);

		ShowWindow(hWindow, nCmdShow);
		UpdateWindow(hWindow);

		MessageBox(NULL, TEXT("Start \"Calculator\" and press CTRL"),
			TEXT("Enumerate Child Windows"), MB_OK | MB_ICONINFORMATION);

		MSG message = {};

		while (GetMessage(&message, NULL, 0, 0))
		{
			TranslateMessage(&message);
			DispatchMessage(&message);
		}

		nExitCode = message.wParam;
	}

	return nExitCode;
}

BOOL CALLBACK EnumChildProc(HWND hWindow, LPARAM lParam)
{
	// Дескриптор окна приложения.
	HWND hApplication = (HWND)lParam;

	CONST INT nSize = 255;

	TCHAR szClassName[nSize] = {};

	// Получение имени класса текущего дочернего окна.
	GetClassName(hWindow, szClassName, nSize);

	if (_tcscmp(szClassName, L"Button") == 0)
	{
		GetWindowRect(hWindow, &a);
		ButtonMap.insert(std::pair<HWND, RECT>(hWindow, a));
	}
	else
		MessageBox(NULL, szClassName, L"Button", MB_OK);

	// Продолжение перечисления дочерних окон до тех пор, пока не будет нажата кнопка "Нет".
	return 1;
}

LRESULT CALLBACK WindowProcedure(HWND hWindow, UINT nMessage, WPARAM wParam, LPARAM lParam)
{
	LRESULT result = 0;

	switch (nMessage)
	{
	case WM_DESTROY:
		KillTimer(hWindow, 1);
		PostQuitMessage(0);
		break;
	case WM_TIMER:
		if (Visability == 1)
		{
			for (auto item : ButtonMap)
			{
				ShowWindow(item.first, SW_MINIMIZE);
				InvalidateRect(hWindow, NULL, TRUE);
			}
			Visability = 0;
		}
		else
		{
			for (auto item : ButtonMap)
			{
				ShowWindow(item.first, SW_SHOWDEFAULT);
				InvalidateRect(hWindow, NULL, TRUE);
			}
			Visability = 1;
		}
		break;
	case WM_KEYDOWN:
		if (wParam == VK_CONTROL)
		{
			// Получение дескриптора главного окна приложения "Калькулятора".
			HWND hCalculator = FindWindow(
				TEXT("CalcFrame"), // Имя класса окна.
				TEXT("Калькулятор")); // Заголовок окна.

			if (!hCalculator)
			{
				MessageBox(hWindow, TEXT("You need to start \"Calculator\" first"),
					TEXT("Error"), MB_OK | MB_ICONERROR);
			}
			else
			{
				// Начало перечисления дочерних окон приложения "Калькулятора".
				EnumChildWindows(
					hCalculator, // Дескриптор родительского окна.
					EnumChildProc, // Указатель на функцию обратного вызова.
					(LPARAM)hWindow); // Аргумент, передаваемый в функцию обратного вызова.
				SetTimer(hWindow, 1, 1000, NULL);
			}
		}
		break;
	default:
		result = DefWindowProc(hWindow, nMessage, wParam, lParam);
		break;
	}

	return result;
}